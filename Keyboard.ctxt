#BlueJ class context
comment0.target=Keyboard
comment0.text=\ \r\n\ Keyboard\ methods\ to\ read\ numbers\ and\ strings\ from\ standard\ input\ (usually\r\n\ KEYBOARD)\ with\ retry\ when\ invalid\ input.\ \ The\ class\ has\ methods\ which\ read\r\n\ things\ from\ the\ keyboard\ terminated\ by\ Enter\ key.\ Most\ of\ the\ methods\ of\r\n\ this\ class\ have\ two\ versions,\ one\ with\ a\ prompt\ parameter\ and\ the\ other\r\n\ without.\ \ The\ latter\ versions\ have\ a\ default\ prompt,\ except\ for\r\n\ readString().\r\n\ <p>(version\ 1.7)\ limits\ number\ of\ retries,\ readString\ terminates\ on\ -1.\r\n\ <br>(version\ 1.8)\ modifies\ readString()\ so\ that\ it\ handles\ CRLF\ ('\\r''\\n')\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ for\ JDK\ 1.1.4\ -\ abo\ -\ 25\ November\ 1997\r\n\ <br>(version\ 1.9)\ modified\ readDate()\ and\ readWord()\ to\ remove\ the\ calls\ to\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ JDK\ 1.02\ deprecated\ methods\ for\ JDK\ 1.1\ code\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ and\ also\ for\ VisualCafe\ 2.0\ Bug\ in\ flush()\ -\ 27\ Jan\ 1998-abo\r\n\ <br>(version\ 2.0)\ javadoc\ style\ -\ 8\ November\ 1999\ -\ abo\r\n\r\n\ @\r\n\ PUBLIC\ FEATURES\:\r\n\ \ \ //\ Methods\:\r\n\ \ \ public\ static\ String\ readString()\r\n\ \ \ public\ static\ String\ readString(String\ prompt)\r\n\ \ \ //\ Read\ a\ string\ from\ the\ console,\ the\ string\ is\ terminated\ by\ a\ newline\r\n\ \ \ //\ Returns\ the\ input\ string\ (without\ the\ newline).\ \ No\ prompt\ unless\r\n\ \ \ //\ supplied.\r\n\r\n\ \ \ public\ static\ int\ \ \ \ readInt()\r\n\ \ \ public\ static\ int\ \ \ \ readInt(String\ prompt)\r\n\ \ \ public\ static\ long\ \ \ readLong()\r\n\ \ \ public\ static\ long\ \ \ readLong(String\ prompt)\r\n\ \ \ public\ static\ float\ \ readFloat()\r\n\ \ \ public\ static\ float\ \ readFloat(String\ prompt)\r\n\ \ \ public\ static\ double\ readDouble()\r\n\ \ \ public\ static\ double\ readDouble(String\ prompt)\r\n\ \ \ //\ Reads\ a\ number\ from\ the\ console,\ the\ input\ is\ terminated\ by\ a\ newline.\r\n\ \ \ //\ If\ the\ input\ is\ not\ a\ valid\ representation\ of\ the\ number's\ type\r\n\ \ \ //\ it\ display's\ an\ error\ message\ and\ retries,\ re-prompting\ if\ applicable.\r\n\ \ \ //\ Returns\ a\ numeric\ value\ of\ the\ indicated\ type.\ After\ 5\ tries\ returns\ 0.\r\n\ \ \ //\ Adds\ space\ to\ prompt\ if\ supplied,\ effective\ default\ prompt\ is\ "\:\ ".\r\n\r\n\ \ \ public\ static\ Date\ readDate()\r\n\ \ \ public\ static\ Date\ readDate(String\ prompt)\r\n\ \ \ //\ Reads\ a\ date\ from\ the\ console,\ the\ input\ is\ terminated\ by\ a\ newline.\r\n\ \ \ //\ If\ the\ input\ is\ not\ a\ valid\ date\ representation\ as\ defined\ in\ the\r\n\ \ \ //\ java.text.DateFormat\ class\ it\ display's\ an\ error\ message,\ re-prompting\ if\r\n\ \ \ //\ applicable\ and\ retries.\ \ After\ 5\ tries\ it\ returns\ the\ current\ date.\r\n\ \ \ //\ Adds\ space\ to\ prompt\ if\ supplied,\ effective\ default\ prompt\ is\ "\:\ ".\r\n\ \ \ //\ Returns\ a\ Date\ object.\r\n\r\n\ \ \ public\ static\ void\ pause()\r\n\ \ \ public\ static\ void\ pause(String\ prompt)\r\n\ \ \ //\ Pauses\ execution\ and\ waits\ for\ the\ user\ to\ press\ <ENTER>\ or\ NEWLINE\ ('\\n')\r\n\ \ \ //\ If\ not\ supplied\ as\ a\ parameter\ the\ default\ prompt\ is\r\n\ \ \ //\ \ \ \ \ \ \ \ \ \ \ "Press\ Enter\ to\ continue......."\r\n\r\n\ \ \ public\ static\ String\ readWord()\r\n\ \ \ //\ Returns\ a\ 'word'\ from\ the\ console.\ A\ word\ is\ any\ group\ of\ characters\r\n\ \ \ //\ terminated\ by\ whitespace\ (one\ or\ more\ '\ ',\ '\\t',\ '\\n').\ \ No\ prompt.\r\n\ \ \ public\ static\ void\ flush()\r\n\ \ \ //\ Ignore\ the\ rest\ of\ the\ current\ line,\ ie.\ flush\ the\ input\ stream\r\n\ \ \ //\ discarding\ any\ contents\ up\ to\ '\\n'\ inclusive.\ \ Does\ nothing\ if\r\n\ \ \ //\ '\\n'\ is\ last\ char\ read.\ \ Only\ useful\ after\ readWord().\r\n\r\n\ MODIFIED\:\r\n\ \ version\ 1.7,\ 5\ May\ 1997.\ retry\ limit.\ rka\r\n\ \ version\ 1.8,\ 25\ November\ 1997.\ CFLF.\ abo\r\n\ \ version\ 1.9,\ 27\ January\ 1998.\ JDK\ 1.1.\ abo\r\n\ @version\ 2.0,\ 8\ November\ 1999.\ javadoc.\ abo\r\n\ @author\ Ewen\ Vowels\r\n\ @author\ Rob\ Allen\r\n\ @author\ Annette\ Oppenheim.\ School\ of\ IT,\ Swinburne\ University\ of\ Technology\r\n
comment1.params=
comment1.target=java.lang.String\ readString()
comment1.text=\r\n\ Read\ a\ string\ from\ the\ console,\ the\ string\ is\ terminated\ by\ a\ newline.\r\n\ No\ prompt.\r\n\ \r\n\ @return\ the\ input\ string\ (without\ the\ newline).\r\n
comment10.params=prompt
comment10.target=double\ readDouble(java.lang.String)
comment10.text=\r\n\ Reads\ a\ double\ precision\ floating\ point\ number\ from\ the\ console,\r\n\ the\ input\ is\ terminated\ by\ a\ newline.\r\n\ If\ the\ input\ is\ not\ a\ valid\ double\ representation\ it\ displays\ an\r\n\ error\ message,\ re-prompts\ and\ retries\r\n\r\n\ @param\ prompt\ the\ prompt\r\n\ @return\ a\ double\ precision\ floating\ point\ number\r\n
comment11.params=
comment11.target=java.util.Date\ readDate()
comment11.text=\r\n\ Reads\ a\ date\ from\ the\ console,\ the\ input\ is\ terminated\ by\ a\ newline.\r\n\ If\ the\ input\ is\ not\ a\ valid\ date\ representation\ as\ defined\ in\ the\r\n\ java.text.DateFormat\ class\ it\ displays\ an\ error\ message,\ re-prompts\r\n\ and\ retries.\r\n\ readDate()\ with\ default\ "\:"\ prompt\r\n\r\n\ @return\ a\ date\r\n
comment12.params=prompt
comment12.target=java.util.Date\ readDate(java.lang.String)
comment12.text=\r\n\ Reads\ a\ date\ from\ the\ console,\ the\ input\ is\ terminated\ by\ a\ newline.\r\n\ If\ the\ input\ is\ not\ a\ valid\ date\ representation\ as\ defined\ in\ the\r\n\ java.text.DateFormat\ class\ it\ displays\ an\ error\ message,\ re-prompts\r\n\ and\ retries.\r\n\r\n\ @param\ prompt\ the\ prompt\r\n\ @return\ a\ date\r\n
comment13.params=
comment13.target=void\ pause()
comment13.text=\r\n\ Pauses\ execution\ and\ waits\ for\ the\ user\ to\ press\ <ENTER>\ or\ NEWLINE\ ('\\n')\r\n\ Displays\ default\ prompt\ 'Press\ Enter\ to\ continue......'\ before\ pausing.\r\n
comment14.params=prompt
comment14.target=void\ pause(java.lang.String)
comment14.text=\r\n\ Pauses\ execution\ and\ waits\ for\ the\ user\ to\ press\ <ENTER>\ or\ NEWLINE\ ('\\n')\r\n\ Displays\ prompt\ before\ pausing.\r\n\r\n\ @param\ prompt\ the\ prompt\r\n
comment15.params=
comment15.target=java.lang.String\ readWord()
comment15.text=\r\n\ Read\ a\ 'word'\ from\ the\ console.\ A\ word\ is\ any\ group\ of\ characters\ terminated\r\n\ by\ whitespace.\ Strips\ leading\ mutiple\ white\ spaces.\r\n\r\n\ @return\ a\ String\ -\ the\ 'word'\ entered\r\n
comment16.params=
comment16.target=void\ flush()
comment16.text=\r\n\ Flush\ the\ input\ stream\ up\ to\ first\ '\\n'\ unless\ '\\n'\ just\ read.\r\n
comment2.params=prompt
comment2.target=java.lang.String\ readString(java.lang.String)
comment2.text=\r\n\ Read\ a\ string\ from\ the\ console,\ the\ string\ is\ terminated\ by\ a\ newline.\r\n\ readString()\ with\ prompting.\r\n\r\n\ @param\ prompt\ the\ prompt\r\n\ @return\ the\ input\ string\ (without\ the\ newline).\r\n
comment3.params=
comment3.target=int\ readInt()
comment3.text=\r\n\ Reads\ an\ integer\ from\ the\ console,\ the\ input\ is\ terminated\ by\ a\ newline.\r\n\ If\ the\ input\ is\ not\ a\ valid\ integer\ representation\ it\ displays\ an\r\n\ error\ message,\ re-prompts\ and\ retries.\r\n\ readInt()\ with\ default\ "\:"\ prompt\r\n\r\n\ @return\ an\ integer\r\n
comment4.params=prompt
comment4.target=int\ readInt(java.lang.String)
comment4.text=\r\n\ Reads\ an\ integer\ from\ the\ console,\ the\ input\ is\ terminated\ by\ a\ newline.\r\n\ If\ the\ input\ is\ not\ a\ valid\ integer\ representation\ it\ displays\ an\r\n\ error\ message,\ re-prompts\ and\ retries.\r\n\r\n\ @param\ prompt\ the\ prompt\r\n\ @return\ an\ integer\r\n
comment5.params=
comment5.target=long\ readLong()
comment5.text=\r\n\ Reads\ a\ long\ integer\ from\ the\ console,\ the\ input\ is\ terminated\ by\ a\ newline.\r\n\ If\ the\ input\ is\ not\ a\ valid\ integer\ representation\ it\ displays\ an\r\n\ error\ message,\ re-prompts\ and\ retries.\r\n\ readLong()\ with\ default\ "\:"\ prompt\r\n\r\n\ @return\ a\ long\ integer\r\n
comment6.params=prompt
comment6.target=long\ readLong(java.lang.String)
comment6.text=\r\n\ Reads\ a\ long\ integer\ from\ the\ console,\ the\ input\ is\ terminated\ by\ a\ newline.\r\n\ If\ the\ input\ is\ not\ a\ valid\ integer\ representation\ it\ displays\ an\r\n\ error\ message,\ re-prompts\ and\ retries.\r\n\r\n\ @param\ prompt\ the\ prompt\r\n\ @return\ a\ long\ integer\r\n
comment7.params=
comment7.target=float\ readFloat()
comment7.text=\r\n\ Reads\ a\ floating\ point\ number\ from\ the\ console,\r\n\ the\ input\ is\ terminated\ by\ a\ newline.\r\n\ If\ the\ input\ is\ not\ a\ valid\ floating\ point\ representation\ it\r\n\ displays\ an\ error\ message,\ re-prompts\ and\ retries.\r\n\ readFloat()\ with\ default\ "\:"\ prompt\r\n\r\n\ @return\ a\ floating\ point\ number\r\n
comment8.params=prompt
comment8.target=float\ readFloat(java.lang.String)
comment8.text=\r\n\ Reads\ a\ floating\ point\ number\ from\ the\ console,\r\n\ the\ input\ is\ terminated\ by\ a\ newline.\r\n\ If\ the\ input\ is\ not\ a\ valid\ floating\ point\ representation\ it\r\n\ displays\ an\ error\ message,\ re-prompts\ and\ retries.\r\n\r\n\ @param\ prompt\ the\ prompt\r\n\ @return\ a\ floating\ point\ number\r\n
comment9.params=
comment9.target=double\ readDouble()
comment9.text=\r\n\ Reads\ a\ double\ precision\ floating\ point\ number\ from\ the\ console,\r\n\ the\ input\ is\ terminated\ by\ a\ newline.\r\n\ If\ the\ input\ is\ not\ a\ valid\ double\ representation\ it\ displays\ an\r\n\ error\ message,\ re-prompts\ and\ retries\r\n\ readDouble()\ with\ default\ "\:"\ prompt\r\n\r\n\ @return\ a\ double\ precision\ floating\ point\ number\r\n
numComments=17
